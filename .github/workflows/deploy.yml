name: AutoCoin API Deploy

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'Dockerfile'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Type of deployment'
        required: true
        default: 'build_and_test'
        type: choice
        options:
          - build_and_test
          - docker_build

jobs:
  build:
    name: "🏗️ Build Application"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean bootJar -x test

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/*.jar
          retention-days: 1

  docker-build:
    name: "🐳 Build & Test Docker"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/

      - name: Build Docker Image
        run: docker build -t autocoin-api .

      - name: Test Docker Container
        run: |
          docker run -d --name autocoin-test \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
            -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            -e JWT_EXPIRATION="${{ secrets.JWT_EXPIRATION }}" \
            -e GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
            -e GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            -e KAKAO_CLIENT_ID="${{ secrets.KAKAO_CLIENT_ID }}" \
            -e KAKAO_CLIENT_SECRET="${{ secrets.KAKAO_CLIENT_SECRET }}" \
            -e OAUTH2_REDIRECT_URI="${{ secrets.OAUTH2_REDIRECT_URI }}" \
            -e AWS_ACCESS_KEY="${{ secrets.AWS_ACCESS_KEY }}" \
            -e AWS_SECRET_KEY="${{ secrets.AWS_SECRET_KEY }}" \
            -e AWS_S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}" \
            -e AWS_REGION="${{ secrets.AWS_REGION }}" \
            -e UPBIT_API_URL="${{ secrets.UPBIT_API_URL }}" \
            -e UPBIT_ENCRYPTION_KEY="${{ secrets.UPBIT_ENCRYPTION_KEY }}" \
            -e SERP_API_KEY="${{ secrets.SERP_API_KEY }}" \
            -e CORS_ALLOWED_ORIGINS="${{ secrets.CORS_ALLOWED_ORIGINS }}" \
            -e SLACK_NOTIFICATIONS_ENABLED=false \
            -p 8080:8080 \
            autocoin-api
          
          echo "Waiting for container to start..."
          sleep 30
          
          echo "Container status:"
          docker ps -a
          
          echo "Container logs:"
          docker logs autocoin-test
          
          echo "Testing health endpoint..."
          curl -f http://localhost:8080/actuator/health || echo "Health check failed"
          
          docker stop autocoin-test
          docker rm autocoin-test

  prepare-deployment:
    name: "🛠️ Prepare EC2 Environment"
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Deploy to EC2 - Environment Setup
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            echo "🚀 Starting deployment to EC2..."
            
            # Update system and install Docker if not exists
            sudo apt-get update
            if ! command -v docker &> /dev/null; then
              echo "📦 Installing Docker..."
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
            fi
            
            # Create app directory
            mkdir -p ~/autocoin-app
            cd ~/autocoin-app
            
            # Stop existing container if running
            echo "🛑 Stopping existing container..."
            docker stop autocoin-api || true
            docker rm autocoin-api || true
            
            # Remove old images to save space
            echo "🧹 Cleaning up old images..."
            docker image prune -f
            
            # Create environment file with all secrets
            echo "📝 Creating environment configuration..."
            cat > .env << EOF
            SPRING_PROFILES_ACTIVE=prod
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
            KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
            OAUTH2_REDIRECT_URI=${{ secrets.OAUTH2_REDIRECT_URI }}
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
            AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            UPBIT_API_URL=${{ secrets.UPBIT_API_URL }}
            UPBIT_ENCRYPTION_KEY=${{ secrets.UPBIT_ENCRYPTION_KEY }}
            SERP_API_KEY=${{ secrets.SERP_API_KEY }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            SLACK_NOTIFICATIONS_ENABLED=true
            EOF
            
            # Create Dockerfile on EC2
            echo "🐳 Creating Dockerfile..."
            cat > Dockerfile << 'DOCKER_EOF'
            FROM eclipse-temurin:17-jre-alpine
            WORKDIR /app
            RUN apk update && apk add --no-cache curl
            COPY autocoin-api.jar app.jar
            ENV TZ=Asia/Seoul
            EXPOSE 8080
            HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
              CMD curl -f http://localhost:8080/actuator/health || exit 1
            ENTRYPOINT ["java", "-jar", "/app/app.jar"]
            DOCKER_EOF
            
            echo "🔄 Deployment environment ready!"

  upload-and-deploy:
    name: "📦 Upload JAR & Deploy"
    runs-on: ubuntu-latest
    needs: prepare-deployment
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/

      - name: List downloaded files
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Build/libs directory contents:"
          ls -la build/libs/
          echo "Finding JAR files:"
          find . -name "*.jar" -type f

      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          source: "build/libs/*.jar"
          target: "/home/ubuntu/autocoin-app/"
          strip_components: 2
          overwrite: true

      - name: Start Application Container
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            cd ~/autocoin-app
            
            # List uploaded files
            echo "📁 Files in autocoin-app directory:"
            ls -la
            
            # Find and rename JAR file
            echo "📁 Finding JAR file..."
            JAR_FILE=$(find . -name "*.jar" -type f | head -1)
            if [ -z "$JAR_FILE" ]; then
              echo "❌ No JAR file found!"
              exit 1
            fi
            
            echo "Found JAR file: $JAR_FILE"
            mv "$JAR_FILE" autocoin-api.jar
            echo "✅ JAR file renamed to autocoin-api.jar"
            
            # Build Docker image
            echo "🏗️ Building Docker image..."
            docker build -t autocoin-api .
            
            # Run new container with environment file
            echo "🚀 Starting new container..."
            docker run -d \
              --name autocoin-api \
              --env-file .env \
              -p 8080:8080 \
              --restart unless-stopped \
              autocoin-api
            
            echo "✅ Container started successfully!"

  health-check:
    name: "🏥 Health Check & Verification"
    runs-on: ubuntu-latest
    needs: upload-and-deploy
    steps:
      - name: Verify Deployment
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            # Wait for container to start
            echo "⏳ Waiting for application to start..."
            sleep 30
            
            # Check container status
            echo "📊 Container status:"
            docker ps -a
            
            # Check application health
            echo "🏥 Health check:"
            if curl -f http://localhost:8080/actuator/health; then
              echo "✅ Health check passed!"
            else
              echo "❌ Health check failed!"
              echo "📋 Container logs:"
              docker logs --tail 50 autocoin-api
              exit 1
            fi
            
            # Show recent logs
            echo "📋 Recent logs:"
            docker logs --tail 20 autocoin-api
            
            echo "✅ Deployment completed successfully!"
            echo "🌐 Application is available at http://${{ secrets.EC2_HOST }}:8080"

  deployment-summary:
    name: "📋 Deployment Summary"
    runs-on: ubuntu-latest
    needs: health-check
    if: always()
    steps:
      - name: Print Deployment Summary
        run: |
          echo "✅ Build completed successfully"
          echo "✅ Docker image created and tested"
          echo "✅ Environment prepared on EC2"
          echo "✅ Application deployed to EC2: ${{ secrets.EC2_HOST }}"
          echo "🌐 Application URL: http://${{ secrets.EC2_HOST }}:8080"
          echo "🏥 Health Check: http://${{ secrets.EC2_HOST }}:8080/actuator/health"
          echo "🚀 Production deployment completed!"