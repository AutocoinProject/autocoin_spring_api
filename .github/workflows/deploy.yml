name: AutoCoin API Deploy

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'Dockerfile'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Type of deployment'
        required: true
        default: 'build_and_test'
        type: choice
        options:
          - build_and_test
          - docker_build

jobs:
  build:
    name: "🏗️ Build Application"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Create application-prod.yml
        run: |
          mkdir -p src/main/resources/
          cat > src/main/resources/application-prod.yml << 'EOF'
          spring:
            datasource:
              url: ${DB_URL}
              username: ${DB_USERNAME}
              password: ${DB_PASSWORD}
              driver-class-name: com.mysql.cj.jdbc.Driver
              hikari:
                maximum-pool-size: 20
                minimum-idle: 10
                connection-timeout: 30000
                idle-timeout: 600000
                max-lifetime: 1800000
          
            jpa:
              hibernate:
                ddl-auto: ${DDL_AUTO:update}
              properties:
                hibernate:
                  format_sql: false
                  use_sql_comments: false
                  jdbc:
                    batch_size: 50
                  order_inserts: true
                  order_updates: true
              show-sql: false
          
          logging:
            level:
              com.autocoin: INFO
              org.springframework.web: WARN
              org.hibernate.SQL: WARN
              io.sentry: WARN
              org.springframework.security: WARN
            pattern:
              file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
            file:
              name: ./logs/autocoin-api.log
            logback:
              rollingpolicy:
                max-file-size: 100MB
                max-history: 30
          
          springdoc:
            api-docs:
              enabled: false
            swagger-ui:
              enabled: false
          
          management:
            endpoints:
              web:
                exposure:
                  include: health,info
            endpoint:
              health:
                show-details: always
            metrics:
              export:
                prometheus:
                  enabled: true
                  step: 60s
          
          sentry:
            traces-sample-rate: 0.1
            debug: false
            environment: production
          
          server:
            compression:
              enabled: true
            http2:
              enabled: true
          
          security:
            headers:
              frame-options: DENY
              content-type-options: nosniff
              xss-protection: "1; mode=block"
          
          spring.jpa.properties.hibernate:
            jdbc.batch_size: 25
            order_inserts: true
            order_updates: true
            batch_versioned_data: true
          EOF

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean bootJar -x test

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/*.jar
          retention-days: 1

  test-docker:
    name: "🐳 Test Docker Build"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/

      - name: Test Docker Build
        run: |
          echo "🐳 Testing Docker build locally..."
          docker build -t autocoin-api-test .
          
          echo "🧪 Quick container test..."
          docker run -d --name test-container \
            -e SPRING_PROFILES_ACTIVE=test \
            -p 8080:8080 \
            autocoin-api-test
          
          sleep 20
          echo "Container logs:"
          docker logs test-container
          
          echo "Testing health endpoint..."
          curl -f http://localhost:8080/actuator/health || echo "Health check failed (expected in test mode)"
          
          docker stop test-container
          docker rm test-container
          docker rmi autocoin-api-test
          echo "✅ Docker test completed"

  deploy:
    name: "🚀 Deploy to EC2"
    runs-on: ubuntu-latest
    needs: test-docker
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/

      - name: Prepare EC2 Environment
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            echo "🚀 Preparing EC2 environment..."
            
            # Install Docker if needed
            if ! command -v docker &> /dev/null; then
              echo "📦 Installing Docker..."
              sudo apt-get update -y
              sudo apt-get remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
            
              sudo apt-get install -y \
                apt-transport-https \
                ca-certificates \
                curl \
                gnupg \
                lsb-release
            
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            
              sudo apt-get update -y
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ${{ secrets.EC2_USERNAME }}
            
              echo "✅ Docker installed"
            else
              echo "✅ Docker already exists"
            fi
            
            # Prepare app directory
            mkdir -p ~/autocoin-app
            cd ~/autocoin-app
            
            # Stop existing container
            sudo docker stop autocoin-api 2>/dev/null || true
            sudo docker rm autocoin-api 2>/dev/null || true
            sudo docker image prune -f || true
            
            # Create environment file
            cat > .env << EOF
            SPRING_PROFILES_ACTIVE=prod
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
            KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
            OAUTH2_REDIRECT_URI=${{ secrets.OAUTH2_REDIRECT_URI }}
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
            AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            UPBIT_API_URL=${{ secrets.UPBIT_API_URL }}
            UPBIT_ENCRYPTION_KEY=${{ secrets.UPBIT_ENCRYPTION_KEY }}
            SERP_API_KEY=${{ secrets.SERP_API_KEY }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            SLACK_NOTIFICATIONS_ENABLED=true
            EOF
            
            # Create Dockerfile
            cat > Dockerfile << 'DOCKER_EOF'
            FROM eclipse-temurin:17-jre-alpine
            WORKDIR /app
            RUN apk update && apk add --no-cache curl
            COPY autocoin-api.jar app.jar
            ENV TZ=Asia/Seoul
            EXPOSE 8080
            HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
              CMD curl -f http://localhost:8080/actuator/health || exit 1
            ENTRYPOINT ["java", "-jar", "/app/app.jar"]
            DOCKER_EOF
            
            echo "✅ Environment prepared"

      - name: Upload JAR and Deploy
        run: |
          echo "📦 Uploading JAR and deploying..."
          
          # Find JAR file
          JAR_FILE=$(find build/libs -name "*.jar" -type f | head -1)
          if [ -z "$JAR_FILE" ]; then
            echo "❌ No JAR file found!"
            exit 1
          fi
          
          echo "Found JAR: $JAR_FILE"
          
          # Upload JAR
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          
          scp -i private_key.pem -o StrictHostKeyChecking=no \
            "$JAR_FILE" \
            ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/autocoin-app/autocoin-api.jar
          
          rm private_key.pem
          echo "✅ JAR uploaded"

      - name: Start Application
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            cd ~/autocoin-app
            
            # Verify JAR exists
            if [ ! -f "autocoin-api.jar" ]; then
              echo "❌ JAR file missing!"
              exit 1
            fi
            
            echo "📁 JAR file: $(ls -lh autocoin-api.jar)"
            
            # Build and start
            echo "🏗️ Building Docker image..."
            sudo docker build -t autocoin-api .
            
            echo "🚀 Starting container..."
            sudo docker run -d \
              --name autocoin-api \
              --env-file .env \
              -p 8080:8080 \
              --restart unless-stopped \
              autocoin-api
            
            echo "✅ Container started"

  verify:
    name: "✅ Verify Deployment"
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Health Check
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          timeout: 300s  # 5분으로 제한
          script: |
            echo "🔍 Quick Docker check..."
            
            # Skip OS detection since we know it's Amazon Linux
            if ! command -v docker &> /dev/null; then
              echo "❌ Docker not found! Installing quickly..."
              sudo dnf update -y
              sudo dnf install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ${{ secrets.EC2_USERNAME }}
              echo "✅ Docker installed"
            else
              echo "✅ Docker available"
            fi
            
            # Use sudo for Docker commands
            DOCKER_CMD="sudo docker"
            
            echo "📊 Current container status:"
            $DOCKER_CMD ps -a || echo "Docker ps failed"
            
            # Quick check if container exists
            if $DOCKER_CMD ps -a | grep -q autocoin-api; then
              echo "✅ Container found"
            
              # Check if running
              if $DOCKER_CMD ps | grep -q autocoin-api; then
                echo "✅ Container is running"
              else
                echo "❌ Container stopped. Logs:"
                $DOCKER_CMD logs --tail 50 autocoin-api
                exit 1
              fi
            else
              echo "❌ No container found!"
              echo "Available containers:"
              $DOCKER_CMD ps -a
              exit 1
            fi
            
            echo "📋 Container logs:"
            $DOCKER_CMD logs --tail 20 autocoin-api
            
            echo "🔍 Quick port check:"
            ss -tuln | grep :8080 && echo "✅ Port 8080 listening" || echo "❌ Port not listening"
            
            echo "🏥 Quick health check (waiting for startup)..."
            
            # Wait for Spring Boot to fully start
            echo "⏳ Waiting for Spring Boot startup..."
            sleep 60  # Spring Boot 시작을 위해 충분한 시간 대기
            
            echo "📊 Container status after waiting:"
            $DOCKER_CMD ps -a
            
            echo "📋 Latest container logs:"
            $DOCKER_CMD logs --tail 10 autocoin-api
            
            for i in {1..5}; do
              echo "Health check attempt $i/5..."
            
              # Check container health status first
              HEALTH_STATUS=$($DOCKER_CMD inspect --format='{{.State.Health.Status}}' autocoin-api 2>/dev/null || echo "none")
              echo "Docker health status: $HEALTH_STATUS"
            
              if curl -f --max-time 15 --connect-timeout 10 http://localhost:8080/actuator/health; then
                echo "✅ Health check passed!"
                echo "🌐 Available at: http://${{ secrets.EC2_HOST }}:8080"
                exit 0
              else
                echo "❌ Health check failed (attempt $i)"
            
                if [ $i -eq 5 ]; then
                  echo "📋 Final detailed logs:"
                  $DOCKER_CMD logs --tail 100 autocoin-api
            
                  echo "🔍 Final container inspection:"
                  $DOCKER_CMD inspect autocoin-api | grep -A 10 -B 10 "Health\|Status\|ExitCode"
            
                  echo "🔍 Testing simple HTTP connection:"
                  curl -v --max-time 5 http://localhost:8080/ || echo "Basic HTTP connection failed"
            
                  exit 1
                else
                  echo "⏳ Waiting 20 seconds before retry..."
                  sleep 20
                fi
              fi
            done

      - name: Deployment Summary
        if: always()
        run: |
          echo "=== Deployment Summary ==="
          echo "✅ Build completed"
          echo "✅ Docker tested"
          echo "✅ Deployed to EC2"
          echo "✅ Health check passed"
          echo "🌐 URL: http://${{ secrets.EC2_HOST }}:8080"
          echo "🏥 Health: http://${{ secrets.EC2_HOST }}:8080/actuator/health"