name: AutoCoin Backend CI/CD

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Run tests
      run: ./gradlew test
      env:
        SPRING_PROFILES_ACTIVE: test
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: build/reports/tests/

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew build -x test
      env:
        SPRING_PROFILES_ACTIVE: prod
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: jar-artifacts
        path: build/libs/

  deploy-ec2:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: jar-artifacts
        path: build/libs/
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          # 기존 프로세스 종료
          sudo pkill -f autocoin || true
          
          # 새 JAR 파일 복사 준비
          mkdir -p ~/app
          
    - name: Copy JAR to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: "build/libs/*.jar"
        target: "~/app/"
        strip_components: 2
    
    - name: Start application
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          cd ~/app
          
          # 환경변수 설정
          export DB_USERNAME="${{ secrets.DB_USERNAME }}"
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export DATABASE_URL="${{ secrets.DATABASE_URL }}"
          export JWT_SECRET="${{ secrets.JWT_SECRET }}"
          export UPBIT_ENCRYPTION_KEY="${{ secrets.UPBIT_ENCRYPTION_KEY }}"
          export AWS_ACCESS_KEY="${{ secrets.AWS_ACCESS_KEY }}"
          export AWS_SECRET_KEY="${{ secrets.AWS_SECRET_KEY }}"
          export AWS_S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}"
          export AWS_REGION="${{ secrets.AWS_REGION }}"
          export GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"
          export GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}"
          export KAKAO_CLIENT_SECRET="${{ secrets.KAKAO_CLIENT_SECRET }}"
          export SERP_API_KEY="${{ secrets.SERP_API_KEY }}"
          
          # 애플리케이션 시작
          nohup java -jar *.jar \
            --spring.profiles.active=prod \
            > /var/log/autocoin/application.log 2>&1 &
          
          # 헬스체크
          sleep 30
          curl -f http://localhost:8080/health || exit 1
    
    - name: Health Check
      run: |
        sleep 10
        curl -f http://${{ secrets.EC2_HOST }}:8080/health

  deploy-render:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    # deploy-ec2와 동시에 실행되지 않도록 주석 처리
    # 필요시 deploy-ec2 대신 사용하거나 조건을 다르게 설정
    
    steps:
    - name: Deploy to Render
      run: |
        curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"
    
    - name: Wait for deployment
      run: sleep 60
    
    - name: Health Check
      run: |
        # Render 앱 URL로 헬스체크
        curl -f https://your-render-app.onrender.com/health

  notify:
    needs: [deploy-ec2]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Slack
      if: ${{ secrets.SLACK_WEBHOOK }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployment
        SLACK_COLOR: ${{ needs.deploy-ec2.result == 'success' && 'good' || 'danger' }}
        SLACK_MESSAGE: |
          AutoCoin Backend Deployment ${{ needs.deploy-ec2.result }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
        SLACK_TITLE: Deployment Status
        SLACK_USERNAME: GitHub Actions
    
    - name: Notify Telegram
      if: ${{ secrets.TELEGRAM_BOT_TOKEN && secrets.TELEGRAM_CHAT_ID }}
      run: |
        STATUS=${{ needs.deploy-ec2.result }}
        if [ "$STATUS" = "success" ]; then
          MESSAGE="✅ AutoCoin Backend 배포 성공\n브랜치: ${{ github.ref_name }}\n커밋: ${{ github.sha }}"
        else
          MESSAGE="❌ AutoCoin Backend 배포 실패\n브랜치: ${{ github.ref_name }}\n커밋: ${{ github.sha }}"
        fi
        
        curl -X POST \
          -H 'Content-Type: application/json' \
          -d "{\"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\", \"text\": \"$MESSAGE\"}" \
          https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage