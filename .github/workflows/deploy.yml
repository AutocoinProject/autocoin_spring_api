name: AutoCoin Backend CI/CD

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Run tests
      run: ./gradlew test
      env:
        SPRING_PROFILES_ACTIVE: test
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: build/reports/tests/

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew build -x test
      env:
        SPRING_PROFILES_ACTIVE: prod
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifacts
        path: build/libs/

  deploy-ec2:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-artifacts
        path: build/libs/
    
    - name: Create .env file
      run: |
        cat > .env << EOF
        # 데이터베이스 설정
        DB_USERNAME="${{ secrets.DB_USERNAME }}"
        DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
        DATABASE_URL="${{ secrets.DATABASE_URL }}"
        
        # JWT 설정
        JWT_SECRET="${{ secrets.JWT_SECRET }}"
        JWT_EXPIRATION=1800000
        
        # 업비트 API 설정
        UPBIT_API_URL="https://api.upbit.com"
        UPBIT_ENCRYPTION_KEY="${{ secrets.UPBIT_ENCRYPTION_KEY }}"
        
        # AWS S3 설정
        AWS_ACCESS_KEY="${{ secrets.AWS_ACCESS_KEY }}"
        AWS_SECRET_KEY="${{ secrets.AWS_SECRET_KEY }}"
        AWS_S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}"
        AWS_REGION="${{ secrets.AWS_REGION || 'ap-northeast-2' }}"
        
        # OAuth2 클라이언트 설정
        GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"
        GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}"
        KAKAO_CLIENT_ID="${{ secrets.KAKAO_CLIENT_ID || 'kakao_client_id' }}"
        KAKAO_CLIENT_SECRET="${{ secrets.KAKAO_CLIENT_SECRET }}"
        OAUTH2_REDIRECT_URI="${{ secrets.OAUTH2_REDIRECT_URI || 'https://your-domain.com/oauth2/redirect' }}"
        
        # CORS 설정
        CORS_ALLOWED_ORIGINS="${{ secrets.CORS_ALLOWED_ORIGINS || 'https://your-frontend-domain.com,http://localhost:3000' }}"
        
        # 서버 설정
        SERVER_PORT=8080
        
        # SERP API 설정
        SERP_API_KEY="${{ secrets.SERP_API_KEY }}"
        EOF
        
        chmod 600 .env
        cat .env
    
    - name: Copy deployment scripts to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: "scripts/*.sh"
        target: "~"
        strip_components: 1
    
    - name: Make scripts executable
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        debug: true
        script: |
          chmod +x ~/deploy.sh
          chmod +x ~/setup_env.sh
          ls -la ~/*.sh
    
    - name: Copy .env file to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: ".env"
        target: "~/app/"
    
    - name: Copy JAR to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: "build/libs/*.jar"
        target: "~/app/"
        strip_components: 2
    
    - name: Run deployment script
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        debug: true
        script: |
          cd ~ && ./deploy.sh
    
    - name: Fix systemd service if needed
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        debug: true
        script: |
          # 서비스 상태 확인
          SERVICE_STATUS=$(sudo systemctl is-active autocoin.service || echo "inactive")
          if [ "$SERVICE_STATUS" != "active" ]; then
            echo "Service is not active, fixing systemd service configuration..."
            # JAR 파일 이름 확인
            JAR_NAME=$(ls -t ~/app/*.jar | head -1 | xargs basename)
            echo "Using JAR file: $JAR_NAME"
            
            # systemd 서비스 파일 생성
            sudo bash -c "cat > /etc/systemd/system/autocoin.service << EOF
          [Unit]
          Description=AutoCoin Spring API Service
          After=network.target mysql.service
          
          [Service]
          User=$USER
          WorkingDirectory=/home/$USER/app
          ExecStart=/usr/bin/java -jar /home/$USER/app/$JAR_NAME --spring.profiles.active=prod -Xmx512m -Xms256m
          SuccessExitStatus=143
          TimeoutStopSec=10
          Restart=always
          RestartSec=5
          EnvironmentFile=/home/$USER/app/.env
          
          [Install]
          WantedBy=multi-user.target
          EOF"
            
            # systemd 설정 리로드 및 서비스 재시작
            sudo systemctl daemon-reload
            sudo systemctl restart autocoin.service
            sudo systemctl status autocoin.service
          else
            echo "Service is already active."
            sudo systemctl status autocoin.service
          fi
    
    - name: Check deployment status
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        debug: true
        script: |
          ps aux | grep java | grep -v grep || echo "No Java processes running"
          curl -v http://localhost:8080/health || echo "Health check failed from server"
    
    - name: Final Health Check
      run: |
        echo "Waiting 10 seconds before final health check..."
        sleep 10
        echo "Performing final health check..."
        curl -v http://${{ secrets.EC2_HOST }}:8080/health || echo "Health check failed but continuing workflow"

  deploy-render:
    needs: build
    runs-on: ubuntu-latest
    if: false  # 현재 비활성화
    # deploy-ec2와 동시에 실행되지 않도록 주석 처리
    # 필요시 deploy-ec2 대신 사용하거나 조건을 다르게 설정
    
    steps:
    - name: Deploy to Render
      run: |
        curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"
    
    - name: Wait for deployment
      run: sleep 60
    
    - name: Health Check
      run: |
        # Render 앱 URL로 헬스체크
        curl -f https://your-render-app.onrender.com/health

  notify:
    needs: [deploy-ec2]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Slack
      if: vars.SLACK_WEBHOOK != ''
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployment
        SLACK_COLOR: ${{ needs.deploy-ec2.result == 'success' && 'good' || 'danger' }}
        SLACK_MESSAGE: |
          AutoCoin Backend Deployment ${{ needs.deploy-ec2.result }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
        SLACK_TITLE: Deployment Status
        SLACK_USERNAME: GitHub Actions
    
    - name: Notify Telegram
      if: vars.TELEGRAM_BOT_TOKEN != '' && vars.TELEGRAM_CHAT_ID != ''
      run: |
        STATUS=${{ needs.deploy-ec2.result }}
        if [ "$STATUS" = "success" ]; then
          MESSAGE="✅ AutoCoin Backend 배포 성공\n브랜치: ${{ github.ref_name }}\n커밋: ${{ github.sha }}"
        else
          MESSAGE="❌ AutoCoin Backend 배포 실패\n브랜치: ${{ github.ref_name }}\n커밋: ${{ github.sha }}"
        fi
        
        curl -X POST \
          -H 'Content-Type: application/json' \
          -d "{\"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\", \"text\": \"$MESSAGE\"}" \
          https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage