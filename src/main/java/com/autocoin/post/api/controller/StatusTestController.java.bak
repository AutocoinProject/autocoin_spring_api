package com.autocoin.post.api.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;

import com.autocoin.post.application.service.PostService;
import com.autocoin.post.dto.request.PostRequestDto;
import com.autocoin.post.dto.response.PostResponseDto;
import com.autocoin.user.domain.User;
import com.autocoin.user.domain.Role;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1/test")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "테스트 API", description = "서버 상태 및 기능 테스트 API")
public class StatusTestController {

    private final PostService postService;

    /**
     * 매우 단순한 상태확인 API
     * @return 기본 문자열 응답
     */
    @Operation(summary = "상태 확인 API", description = "서버가 정상적으로 응답하는지 확인합니다.")
    @GetMapping("/status")
    public ResponseEntity<String> getStatus() {
        log.info("Status check called");
        return ResponseEntity.ok("Server is running");
    }
    
    /**
     * 어떤 형식의 데이터라도 처리하는 API
     * @return 생성된 게시글 정보
     */
    @Operation(summary = "(테스트용) 간단한 게시글 작성", description = "어떤 형식으로든 게시글을 작성합니다. 테스트용입니다.")
    @PostMapping("/simple-post")
    public ResponseEntity<PostResponseDto> createAnyFormatPost() {
        try {
            log.info("Simple post creation called");
            
            // 테스트용 User 객체 생성
            User testUser = User.builder()
                    .id(1L)
                    .email("test@example.com")
                    .username("testuser")
                    .role(Role.ROLE_USER)
                    .build();
            
            // 기본 값을 가진 DTO 생성
            PostRequestDto newDto = PostRequestDto.builder()
                    .title("단순 테스트 게시글")
                    .content("자동 생성된 테스트 게시글 내용")
                    .writer("testuser")
                    .build();
            
            log.info("Calling postService.createPost() with simple values");
            PostResponseDto response = postService.createPost(newDto, testUser);
            log.info("Simple post created successfully: id={}", response.getId());
            
            return ResponseEntity.status(HttpStatus.CREATED).body(response);
        } catch (Exception e) {
            log.error("Error in createAnyFormatPost: ", e);
            throw e;
        }
    }
}