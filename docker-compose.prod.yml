version: '3.8'

services:
  # MySQL 데이터베이스
  mysql:
    image: mysql:8.0
    container_name: autocoin-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-strongpassword123}
      MYSQL_DATABASE: ${DB_NAME:-autocoin_db}
      MYSQL_USER: ${DB_USERNAME:-autocoin}
      MYSQL_PASSWORD: ${DB_PASSWORD:-autocoinpass}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/sql:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-3306}:3306"
    networks:
      - autocoin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis (캐싱 및 세션 저장)
  redis:
    image: redis:7-alpine
    container_name: autocoin-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - autocoin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Autocoin Spring Boot API
  autocoin-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: autocoin-api
    environment:
      SPRING_PROFILES_ACTIVE: prod
      
      # 데이터베이스 설정
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${DB_NAME:-autocoin_db}
      DB_USERNAME: ${DB_USERNAME:-autocoin}
      DB_PASSWORD: ${DB_PASSWORD:-autocoinpass}
      DDL_AUTO: ${DDL_AUTO:-update}
      
      # JWT 설정
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-3600000}
      
      # OAuth2 설정
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      KAKAO_CLIENT_ID: ${KAKAO_CLIENT_ID}
      KAKAO_CLIENT_SECRET: ${KAKAO_CLIENT_SECRET}
      OAUTH2_REDIRECT_URI: ${OAUTH2_REDIRECT_URI}
      
      # AWS S3 설정
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
      AWS_SECRET_KEY: ${AWS_SECRET_KEY}
      AWS_REGION: ${AWS_REGION:-ap-northeast-2}
      
      # Upbit 설정
      UPBIT_API_URL: ${UPBIT_API_URL:-https://api.upbit.com}
      UPBIT_ENCRYPTION_KEY: ${UPBIT_ENCRYPTION_KEY}
      
      # 뉴스 API 설정
      SERP_API_KEY: ${SERP_API_KEY}
      
      # Slack 설정
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
      SLACK_NOTIFICATIONS_ENABLED: ${SLACK_NOTIFICATIONS_ENABLED:-true}
      SLACK_ERROR_CHANNEL: ${SLACK_ERROR_CHANNEL:-#errors}
      SLACK_ALERT_CHANNEL: ${SLACK_ALERT_CHANNEL:-#alerts}
      SLACK_TRADE_CHANNEL: ${SLACK_TRADE_CHANNEL:-#trades}
      
      # Sentry 설정
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_RELEASE: ${SENTRY_RELEASE:-1.0.0}
      SENTRY_TRACES_SAMPLE_RATE: ${SENTRY_TRACES_SAMPLE_RATE:-0.1}
      
      # CORS 설정
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      
      # Swagger 설정 (운영환경에서는 false 권장)
      SWAGGER_ENABLED: ${SWAGGER_ENABLED:-false}
      
    ports:
      - "${API_PORT:-8080}:8080"
    volumes:
      - ./logs:/app/logs
    networks:
      - autocoin-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx (리버스 프록시 및 로드 밸런서)
  nginx:
    image: nginx:alpine
    container_name: autocoin-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    networks:
      - autocoin-network
    depends_on:
      - autocoin-api
    restart: unless-stopped

  # Prometheus (모니터링)
  prometheus:
    image: prom/prometheus:v2.40.7
    container_name: autocoin-prometheus-prod
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus-prod.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - autocoin-network
    restart: unless-stopped

  # Grafana (모니터링 대시보드)
  grafana:
    image: grafana/grafana:9.3.2
    container_name: autocoin-grafana-prod
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - autocoin-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  mysql_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  autocoin-network:
    driver: bridge
